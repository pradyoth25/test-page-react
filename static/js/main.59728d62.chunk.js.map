{"version":3,"sources":["logo.svg","Thumbnail.js","Projects.js","Articles.js","About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Thumbnail","props","className","to","link","src","image","alt","title","category","NewComponent","App","exact","path","component","Projects","Articles","About","logo","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mIAAAA,EAAOC,QAAU,IAA0B,kC,oLCkB5BC,MAdf,SAAmBC,GACjB,OACE,yBAAKC,UAAU,WACb,kBAAC,IAAD,CAAMC,GAAIF,EAAMG,MACd,yBAAKF,UAAU,iBACb,yBAAKG,IAAKJ,EAAMK,MAAOC,IAAI,mBAE7B,yBAAKL,UAAU,iBAAiBD,EAAMO,OACtC,yBAAKN,UAAU,oBAAoBD,EAAMQ,aCqBlCC,MA7Bf,SAAsBT,GACpB,OACE,6BACE,wCACE,kBAAC,EAAD,CACIG,KAAK,WACLE,MAAM,+BACNE,MAAM,mBACNC,SAAS,eANjB,WAUI,kBAAC,EAAD,CACIL,KAAK,UACLE,MAAM,+BACNE,MAAM,qBACNC,SAAS,YAGb,kBAAC,EAAD,CACIL,KAAK,aACLE,MAAM,iCACNE,MAAM,qBACNC,SAAS,kBCjBNC,MARf,SAAsBT,GACpB,OACE,6BACE,6CCKSS,MARf,SAAsBT,GACpB,OACE,6BACE,6CC2BSU,MAvBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKT,UAAU,OAEX,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,YAAYC,UAAWE,IACnC,kBAAC,IAAD,CAAOH,KAAK,SAASC,UAAWG,IAElC,yBAAKf,UAAU,UACb,yBAAKG,IAAKa,IAAMhB,UAAU,OAAOK,IAAI,eACrC,yBAAKL,UAAU,cAAf,qBAEE,yBAAKA,UAAU,YAAW,uBAAGiB,KAAK,IAAIjB,UAAU,QAAtB,aAC1B,yBAAKA,UAAU,YAAW,uBAAGiB,KAAK,YAAYjB,UAAU,QAA9B,aAC1B,yBAAKA,UAAU,YAAW,uBAAGiB,KAAK,SAASjB,UAAU,QAA3B,eCZlBkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.59728d62.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './App.css';\r\n \r\nfunction Thumbnail(props) {\r\n  return (\r\n    <div className=\"project\">\r\n      <Link to={props.link}>\r\n        <div className=\"project-image\">\r\n          <img src={props.image} alt=\"Project Image\"/>\r\n        </div>\r\n        <div className=\"project-title\">{props.title}</div>\r\n        <div className=\"project-category\">{props.category}</div>\r\n            </Link>\r\n    </div>\r\n  )\r\n}\r\n \r\nexport default Thumbnail;","import React from 'react';\r\nimport Thumbnail from './Thumbnail.js'; // Import the Thumbnail component\r\nimport './App.css';\r\n \r\nfunction NewComponent(props) {\r\n  return (\r\n    <div>\r\n      <h1>Projects</h1>\r\n        <Thumbnail\r\n            link=\"/twitter\"\r\n            image=\"http://twitter-image-url.jpg\"\r\n            title=\"Twitter Newsfeed\"\r\n            category=\"Mobile App\"\r\n        />\r\n        asdasdas\r\n            \r\n        <Thumbnail\r\n            link=\"/airbnb\"\r\n            image=\"http://airbnb-image-url.jpg>\"\r\n            title=\"Airbnb Experiences\"\r\n            category=\"Website\"\r\n        />\r\n            \r\n        <Thumbnail\r\n            link=\"/photoshop\"\r\n            image=\"http://photoshop-image-url.jpg\"\r\n            title=\"Photoshop Redesign\"\r\n            category=\"Desktop App\"\r\n        />\r\n    </div>\r\n  )\r\n}\r\n \r\nexport default NewComponent;","import React from \"react\"\r\n \r\nfunction NewComponent(props) {\r\n  return (\r\n    <div>\r\n      <h1>Articlessss</h1>\r\n    </div>\r\n  )\r\n}\r\n \r\nexport default NewComponent;","import React from \"react\"\r\n \r\nfunction NewComponent(props) {\r\n  return (\r\n    <div>\r\n      <h1>About meeee</h1>\r\n    </div>\r\n  )\r\n}\r\n \r\nexport default NewComponent;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n// Import the BrowserRouter, Route and Link components\nimport { BrowserRouter, Route, Link } from 'react-router-dom'; \nimport Projects from './Projects.js'; \nimport Articles from './Articles.js'; \nimport About from './About.js'; \n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n          {/* // Set up the Router */}\n          <Route exact path=\"/\" component={Projects} />\n          <Route path=\"/articles\" component={Articles} />\n          <Route path=\"/about\" component={About} />\n\n        <div className=\"navbar\">\n          <img src={logo} className=\"logo\" alt=\"Logo Image\"/>\n          <div className=\"navbar-sub\">\n            SOME TEXT PLEASE!!\n            <div className=\"bar-item\"><a href=\"/\" className=\"item\">Projects</a></div>\n            <div className=\"bar-item\"><a href=\"/articles\" className=\"item\">Articles</a></div>\n            <div className=\"bar-item\"><a href=\"/about\" className=\"item\">About</a></div>\n          </div>\n        </div>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}